<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.tesa.kafka</groupId>
  <artifactId>mq-producer</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>
  <name>mq-producer</name>
  <description>Demo project for Spring Boot</description>

  <parent>
    <artifactId>com.tesa.kafka</artifactId>
    <groupId>com.tesa.kafka</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- kafka引用 -->
    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka</artifactId>
    </dependency>
    <!-- gson引入 -->
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>${gson.version}</version>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <!-- docker镜像构建插件 -->
      <plugin>
          <groupId>com.spotify</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>0.4.11</version>
          <configuration>
            <!-- 构建后的镜像名字 -->
            <imageName>${project.artifactId}</imageName>
            <!-- dockerfile所在位置 -->
            <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>

            <resources>
              <resource>
                <targetPath>/</targetPath>
                <directory>${project.build.directory}</directory>
                <!--
              因为我们要部署到Docker容器的是这个应用jar，而target目录下有很多是打包时候生成的文件，
              对于我们这个应用jar来说没有任何作用，
              所以，我们需要使用include标签来指定我们需要构建镜像时候所需的文件。不然的话
              会把target目录下所有文件都打包到容器中，就会出现很多无用文件，让镜像大小变得很大。
             -->
                <include>${project.artifactId}-${project.version}.jar</include>
              </resource>
            </resources>
          </configuration>

      </plugin>

    </plugins>
  </build>

</project>
